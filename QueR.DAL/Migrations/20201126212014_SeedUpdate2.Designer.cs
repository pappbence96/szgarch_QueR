// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QueR.DAL;

namespace QueR.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201126212014_SeedUpdate2")]
    partial class SeedUpdate2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f5583ca1-c767-48a2-8699-4c320103cdbc",
                            Name = "operator",
                            NormalizedName = "OPERATOR"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "1927f661-1d07-4444-8aaf-709a88fd0aae",
                            Name = "administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "63bbe611-4da6-44a2-aaff-18cd12170bbb",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "946315b3-5ebc-4d33-80bf-fadddf7de12e",
                            Name = "employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "7c856f2f-8d2d-47e3-9a69-d1709c6fc909",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("QueR.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssignedQueueId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("WorksiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedQueueId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("WorksiteId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "99c2da2e-6173-44b8-b82e-ac73cf8a715c",
                            Email = "operator@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Test",
                            Gender = 2,
                            LastName = "Operator",
                            LockoutEnabled = false,
                            NormalizedEmail = "OPERATOR@TEST.HU",
                            NormalizedUserName = "OPERATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEHZV6cTXXnBDX907gsG0vcqaxnr7ydHpyxPaYn2ISYttx54APL5bd4pMds8Di3uWdw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "operator"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 1,
                            ConcurrencyStamp = "dc88261a-290c-4414-aa1c-2f1c43acdc34",
                            Email = "admina@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 2,
                            LastName = "A",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINA@TEST.HU",
                            NormalizedUserName = "ADMINA",
                            PasswordHash = "AQAAAAEAACcQAAAAEK3Pn9Lb/y287e0myjoFHA3gc3zSspeL/3V2piIS0gYhRXqWpnh5JG/jAa5gjUIDtQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admina"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 2,
                            ConcurrencyStamp = "5bcd2bf7-6975-4a08-977a-e5d6bda3c798",
                            Email = "adminb@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 2,
                            LastName = "B",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINB@TEST.HU",
                            NormalizedUserName = "ADMINB",
                            PasswordHash = "AQAAAAEAACcQAAAAEIJMcJHm57TC80MANa3hq728aQ0YpPM/nnUW0I2FFc3FxgpC4rYbqz4GNCFFI/DwRA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "adminb"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 1,
                            ConcurrencyStamp = "a0fee814-69ca-4d87-93a3-8373e2a9c2fb",
                            Email = "managera1@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Manager",
                            Gender = 2,
                            LastName = "A1",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGERA1@TEST.HU",
                            NormalizedUserName = "MANAGERA1",
                            PasswordHash = "AQAAAAEAACcQAAAAEEbnAPUkpWYgGDBM130RTZ8WktHt9N7B820YBXBPaAR+cNf8JeQ0gbJ+WoKow6CMZA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "managera1",
                            WorksiteId = 1
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 1,
                            ConcurrencyStamp = "ab1f10dc-9f36-43ef-a26f-2c80c6d70070",
                            Email = "managera2@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Manager",
                            Gender = 2,
                            LastName = "A2",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGERA2@TEST.HU",
                            NormalizedUserName = "MANAGERA2",
                            PasswordHash = "AQAAAAEAACcQAAAAEG/Ev3LEbxCFEBHkTFOVUNlKBduf5gGqBPZoG4T4m6SsPTxgEsmvQtzjVigkXrk7Ig==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "managera2",
                            WorksiteId = 2
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 2,
                            ConcurrencyStamp = "c8528207-2878-44a1-9daa-64b249aad260",
                            Email = "managerb1@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Manager",
                            Gender = 2,
                            LastName = "B1",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGERB1@TEST.HU",
                            NormalizedUserName = "MANAGERB1",
                            PasswordHash = "AQAAAAEAACcQAAAAEFxZkfpxL0JMpWGeu93kbLHqbgr7aAnJw7JcWF8KUMqlsxP/W3c4FsBfHWw7jJFK3A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "managerb1",
                            WorksiteId = 3
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 2,
                            ConcurrencyStamp = "88507dc7-e344-404c-82fd-c3dd0684c00f",
                            Email = "managerb2@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Manager",
                            Gender = 2,
                            LastName = "B2",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGERB2@TEST.HU",
                            NormalizedUserName = "MANAGERB2",
                            PasswordHash = "AQAAAAEAACcQAAAAEDl1jaij5P5k/fseQi6kyDcBNBcTJ+AoK+9Z2tvxb5yNzmrrzH68Afs4oZ/f7MlZug==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "managerb2",
                            WorksiteId = 4
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 1,
                            ConcurrencyStamp = "fc5e3e7e-2f18-47d8-97aa-61ea79ad3512",
                            Email = "workera11@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "A11",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERA11@TEST.HU",
                            NormalizedUserName = "WORKERA11",
                            PasswordHash = "AQAAAAEAACcQAAAAEFOTdgRR9GyJAPCb1avuQajARtnEdkP7zremlE3iQt4Xpps3AjWAaSt79VaPVoFm6A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workera11",
                            WorksiteId = 1
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 1,
                            ConcurrencyStamp = "d95ca76d-e2c7-43df-84d7-c79deeb94093",
                            Email = "workera12@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "A12",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERA12@TEST.HU",
                            NormalizedUserName = "WORKERA12",
                            PasswordHash = "AQAAAAEAACcQAAAAEIsncEBFsfcTSJdVMbTFfcTiQtx2r8H2SLbHCnLQ4xlmw89fG46Eu/PcG5wlYO04zQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workera12",
                            WorksiteId = 1
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 1,
                            ConcurrencyStamp = "d0728c1b-d1cd-4fd3-ada4-6d96229d9154",
                            Email = "workera21@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "A21",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERA21@TEST.HU",
                            NormalizedUserName = "WORKERA21",
                            PasswordHash = "AQAAAAEAACcQAAAAEFzEx7eGtC4evB30lZMiCkG0v8FOid3EeGFL372UHKAT9JyGf0f4jA+WjBlgHo+8BA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workera21",
                            WorksiteId = 2
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 1,
                            ConcurrencyStamp = "b39434de-467b-4f05-86ac-31cbcedef2d3",
                            Email = "workera22@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "A22",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERA22@TEST.HU",
                            NormalizedUserName = "WORKERA22",
                            PasswordHash = "AQAAAAEAACcQAAAAEHNkRZuy0px6l/xU5fddLh+75aIRfcnUEdoxrhI4D7o7GUO8XlsP5zNjYpbJ+RkkbA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workera22",
                            WorksiteId = 2
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 2,
                            ConcurrencyStamp = "d6eb6649-3788-472b-8070-ff07dd0a8fc2",
                            Email = "workerb11@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "B11",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERB11@TEST.HU",
                            NormalizedUserName = "WORKERB11",
                            PasswordHash = "AQAAAAEAACcQAAAAEL89d+QYH5KI8FxIuS66fmBQQrtn1TFuSUCwNkbiAw92CUJte/21faya71PKzzbc4A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workerb11",
                            WorksiteId = 3
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 2,
                            ConcurrencyStamp = "5d1e511b-1e35-47a3-b877-acbe13a287ca",
                            Email = "workerb12@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "B12",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERB12@TEST.HU",
                            NormalizedUserName = "WORKERB12",
                            PasswordHash = "AQAAAAEAACcQAAAAEGOWFVIpONkOrpiIHQ6p9sB08WFCUq5TdLc9MJBEwU2BIgs3KDNZ6e564PvGNPUy9A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workerb12",
                            WorksiteId = 3
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 2,
                            ConcurrencyStamp = "5b4609b8-cbaa-489e-9b02-7ea2ee92d2a5",
                            Email = "workerb21@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "B21",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERB21@TEST.HU",
                            NormalizedUserName = "WORKERB21",
                            PasswordHash = "AQAAAAEAACcQAAAAEI/fvcYGYmf8XHvcjeLKDKNnUnnyZOAfjUnKXy9ji2FC35hMir+tI12LjnpoMcJN6A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workerb21",
                            WorksiteId = 4
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "",
                            CompanyId = 2,
                            ConcurrencyStamp = "cf9656b3-cf76-49c2-b212-96e5afff48b4",
                            Email = "workerb22@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "B22",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERB22@TEST.HU",
                            NormalizedUserName = "WORKERB22",
                            PasswordHash = "AQAAAAEAACcQAAAAEPhgMydZx+tTup7UK6oFBloso241i3Saeur5n6FH0qs5eB21Abot4/OQPcWPPrrYaQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workerb22",
                            WorksiteId = 4
                        });
                });

            modelBuilder.Entity("QueR.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<string>("MailingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId")
                        .IsUnique()
                        .HasFilter("[AdministratorId] IS NOT NULL");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MailingAddress = "Address of Company A",
                            Name = "Company A"
                        },
                        new
                        {
                            Id = 2,
                            MailingAddress = "Address of Company B",
                            Name = "Company B"
                        });
                });

            modelBuilder.Entity("QueR.Domain.Entities.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NextNumber")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("TypeId");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("QueR.Domain.Entities.QueueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("QueueTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            IsEnabled = true,
                            Name = "Warranty"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            IsEnabled = true,
                            Name = "Returns"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            IsEnabled = true,
                            Name = "General administration"
                        });
                });

            modelBuilder.Entity("QueR.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.ToTable("Sites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "random address",
                            CompanyId = 1,
                            Name = "A Site 1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "random address",
                            CompanyId = 1,
                            Name = "A Site 2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "random address",
                            CompanyId = 2,
                            Name = "B Site 1"
                        },
                        new
                        {
                            Id = 4,
                            Address = "random address",
                            CompanyId = 2,
                            Name = "B Site 2"
                        });
                });

            modelBuilder.Entity("QueR.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Called")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HandlerId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("QueueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HandlerId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("QueueId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("QueR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("QueR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QueR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("QueR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QueR.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("QueR.Domain.Entities.Queue", "AssignedQueue")
                        .WithMany("AssignedEmployees")
                        .HasForeignKey("AssignedQueueId");

                    b.HasOne("QueR.Domain.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");

                    b.HasOne("QueR.Domain.Entities.Site", "Worksite")
                        .WithMany("Employees")
                        .HasForeignKey("WorksiteId");
                });

            modelBuilder.Entity("QueR.Domain.Entities.Company", b =>
                {
                    b.HasOne("QueR.Domain.Entities.ApplicationUser", "Administrator")
                        .WithOne("AdministratedCompany")
                        .HasForeignKey("QueR.Domain.Entities.Company", "AdministratorId");
                });

            modelBuilder.Entity("QueR.Domain.Entities.Queue", b =>
                {
                    b.HasOne("QueR.Domain.Entities.Site", "Site")
                        .WithMany("Queues")
                        .HasForeignKey("SiteId");

                    b.HasOne("QueR.Domain.Entities.QueueType", "Type")
                        .WithMany("Queues")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QueR.Domain.Entities.QueueType", b =>
                {
                    b.HasOne("QueR.Domain.Entities.Company", "Company")
                        .WithMany("AvailableQueueTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QueR.Domain.Entities.Site", b =>
                {
                    b.HasOne("QueR.Domain.Entities.Company", "Company")
                        .WithMany("Sites")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QueR.Domain.Entities.ApplicationUser", "Manager")
                        .WithOne("ManagedSite")
                        .HasForeignKey("QueR.Domain.Entities.Site", "ManagerId");
                });

            modelBuilder.Entity("QueR.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("QueR.Domain.Entities.ApplicationUser", "Handler")
                        .WithMany("HandledTickets")
                        .HasForeignKey("HandlerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("QueR.Domain.Entities.ApplicationUser", "Owner")
                        .WithMany("Tickets")
                        .HasForeignKey("OwnerId");

                    b.HasOne("QueR.Domain.Entities.Queue", "Queue")
                        .WithMany("Tickets")
                        .HasForeignKey("QueueId");
                });
#pragma warning restore 612, 618
        }
    }
}
