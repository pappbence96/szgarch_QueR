// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QueR.DAL;

namespace QueR.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201126211037_SeedUpdate")]
    partial class SeedUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "eec16eca-92fd-4fc8-a40e-9200e7c5e54b",
                            Name = "operator",
                            NormalizedName = "OPERATOR"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "df211399-9990-4ad1-badd-98866a4607e8",
                            Name = "administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "666699b3-591f-4567-b4a9-a83b4f536eb3",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "f0907eb2-d3d3-4575-a866-5d3dac3316f0",
                            Name = "employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "ad1b886d-60bf-4428-b4e1-8a73613ca7a9",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("QueR.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssignedQueueId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("WorksiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedQueueId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("WorksiteId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "73013b06-8cac-4bbc-9fa9-88f35d312394",
                            Email = "operator@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Test",
                            Gender = 2,
                            LastName = "Operator",
                            LockoutEnabled = false,
                            NormalizedEmail = "OPERATOR@TEST.HU",
                            NormalizedUserName = "OPERATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEGfQCff+v3H8LRsVTCfGeUnb8fugy7mez7fdZk7fFjPxovS0qkZh2GDCsfuNq16OBQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "operator"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "cc30d075-1486-4f3e-8c3d-ce4a4f796da8",
                            Email = "admina@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 2,
                            LastName = "A",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINA@TEST.HU",
                            NormalizedUserName = "ADMINA",
                            PasswordHash = "AQAAAAEAACcQAAAAEA5aS8EzVEwHcVueG1Mrzi9sfUKxd6MwQn5lDk3FVfQU2VvfEsnuqbU3tSw8x7QhFQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admina"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "29d16c0f-e2de-419b-80ec-bfbc00662f82",
                            Email = "adminb@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 2,
                            LastName = "B",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINB@TEST.HU",
                            NormalizedUserName = "ADMINB",
                            PasswordHash = "AQAAAAEAACcQAAAAEMDfa53bJOKofWRXwgdgcnmC49oRcrqVdeAUi+70qJ+SVvzP+GEgev/WUbsThMHoKQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "adminb"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "d4ac3c41-fb11-4ae5-a637-879ca92f1b2d",
                            Email = "managera1@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Manager",
                            Gender = 2,
                            LastName = "A1",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGERA1@TEST.HU",
                            NormalizedUserName = "MANAGERA1",
                            PasswordHash = "AQAAAAEAACcQAAAAENoRH3nuzYdZ++UHBGajcUvxbgVxzSjBTaFQIRr7H80swfpja2Dzqrzdw9RaywQLlA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "managera1"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "bbcfc071-55fe-4a93-b739-ed26d52d7a41",
                            Email = "managera2@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Manager",
                            Gender = 2,
                            LastName = "A2",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGERA2@TEST.HU",
                            NormalizedUserName = "MANAGERA2",
                            PasswordHash = "AQAAAAEAACcQAAAAEPCykcZrYYY4exKzoMxj+B9mL3iRsBqFwK/MENHKIaAgPl/Se44cmxcJrE+EbjQwMw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "managera2"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "9a9943f8-c8d3-45d9-aec9-71b71e33d2ef",
                            Email = "managerb1@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Manager",
                            Gender = 2,
                            LastName = "B1",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGERB1@TEST.HU",
                            NormalizedUserName = "MANAGERB1",
                            PasswordHash = "AQAAAAEAACcQAAAAEIKCl8w7DQBEJBdkl9cmKkpd02FwXFYxSfVBwB4exIBXtzD2eSWSjEOYrC26+yBA4w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "managerb1"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "7474edba-3f1a-4d09-ad23-db82c3e127a6",
                            Email = "managerb2@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Manager",
                            Gender = 2,
                            LastName = "B2",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGERB2@TEST.HU",
                            NormalizedUserName = "MANAGERB2",
                            PasswordHash = "AQAAAAEAACcQAAAAEPLKROaJ20Bego7gviET4WohjrvyS9TqKFd4oxFofvARdZ2OKPBOhUCTwSxcG2ZVTg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "managerb2"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "6ff01aee-ab75-4999-ad0f-edb20a289e96",
                            Email = "workera11@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "A11",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERA11@TEST.HU",
                            NormalizedUserName = "WORKERA11",
                            PasswordHash = "AQAAAAEAACcQAAAAEJx/LhCrjBKJKLQsDwBQYK1J9XFG0BQG4gwz7CA0GwWDDqBAO6MxUmyPfm/zquX7nA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workera11"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "7a021976-2333-4640-95c5-cb4203eeb497",
                            Email = "workera12@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "A12",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERA12@TEST.HU",
                            NormalizedUserName = "WORKERA12",
                            PasswordHash = "AQAAAAEAACcQAAAAEN6OTk9BzwRO+2yRKoLvUGtpdtpNxVqioPfYmqhLRWk/Lr/4PaXdvjGegSS2Wrulxg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workera12"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "9c784958-4f19-4e1c-9f1f-9dba5e65bdab",
                            Email = "workera21@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "A21",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERA21@TEST.HU",
                            NormalizedUserName = "WORKERA21",
                            PasswordHash = "AQAAAAEAACcQAAAAEDyVO2ldytyquMqx9joPGVdtOMOG4FdKxsge8AyqsrjQhkz+q95up3irp9dVg7z8Ww==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workera21"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "7d3d3cce-e71d-4174-bf26-2c14a57f421c",
                            Email = "workera22@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "A22",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERA22@TEST.HU",
                            NormalizedUserName = "WORKERA22",
                            PasswordHash = "AQAAAAEAACcQAAAAEJWxqTvho6wK56N8oGrN2bUuGWLXA5f6YwA21Lka/inaRlBG12icKGKT7DWvEmzeAA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workera22"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "b9d12ab3-0996-45ad-9509-d5e2fb808701",
                            Email = "workerb11@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "B11",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERB11@TEST.HU",
                            NormalizedUserName = "WORKERB11",
                            PasswordHash = "AQAAAAEAACcQAAAAEMY90GhktP3ulul2H4jYU7X6nHb0LiQtih+QoV1qPfqfpgXZgmslmS1ABKSTHrVCdg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workerb11"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "273c8cb9-3142-4433-a1ff-7f7601d427ae",
                            Email = "workerb12@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "B12",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERB12@TEST.HU",
                            NormalizedUserName = "WORKERB12",
                            PasswordHash = "AQAAAAEAACcQAAAAEA/Zg39TdCDbtsegTbTyl7VhwJ3zdEIMDA+FAhCOc6i1DBunfKz7FZfl/rHRG0SxKw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workerb12"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "b5032de2-2267-4f20-84c1-434c174341b8",
                            Email = "workerb21@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "B21",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERB21@TEST.HU",
                            NormalizedUserName = "WORKERB21",
                            PasswordHash = "AQAAAAEAACcQAAAAEPdBWW4b296TIreHeu34UL7LCb0D9Ep/C1Eom8S/j13sP6K5zi5yONiT/ld2mECkjw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workerb21"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "",
                            ConcurrencyStamp = "79aefd0a-3253-4d8b-8f2d-a3ac56bb92de",
                            Email = "workerb22@test.hu",
                            EmailConfirmed = false,
                            FirstName = "Worker",
                            Gender = 2,
                            LastName = "B22",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKERB22@TEST.HU",
                            NormalizedUserName = "WORKERB22",
                            PasswordHash = "AQAAAAEAACcQAAAAEBsRhWs0YXrB9Sh/khXu1yMXLc3KVitOLuUEQwgu3i5NWaENtO5s83C1a7kzmBHrIw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "workerb22"
                        });
                });

            modelBuilder.Entity("QueR.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<string>("MailingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId")
                        .IsUnique()
                        .HasFilter("[AdministratorId] IS NOT NULL");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdministratorId = 2,
                            MailingAddress = "Address of Company A",
                            Name = "Company A"
                        },
                        new
                        {
                            Id = 2,
                            AdministratorId = 3,
                            MailingAddress = "Address of Company B",
                            Name = "Company B"
                        });
                });

            modelBuilder.Entity("QueR.Domain.Entities.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NextNumber")
                        .HasColumnType("int");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Step")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("TypeId");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("QueR.Domain.Entities.QueueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("QueueTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            IsEnabled = true,
                            Name = "Warranty"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            IsEnabled = true,
                            Name = "Returns"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            IsEnabled = true,
                            Name = "General administration"
                        });
                });

            modelBuilder.Entity("QueR.Domain.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.ToTable("Sites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "random address",
                            CompanyId = 1,
                            ManagerId = 4,
                            Name = "A Site 1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "random address",
                            CompanyId = 1,
                            ManagerId = 5,
                            Name = "A Site 2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "random address",
                            CompanyId = 2,
                            ManagerId = 6,
                            Name = "B Site 1"
                        },
                        new
                        {
                            Id = 4,
                            Address = "random address",
                            CompanyId = 2,
                            ManagerId = 7,
                            Name = "B Site 2"
                        });
                });

            modelBuilder.Entity("QueR.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Called")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HandlerId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("QueueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HandlerId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("QueueId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("QueR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("QueR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QueR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("QueR.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QueR.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("QueR.Domain.Entities.Queue", "AssignedQueue")
                        .WithMany("AssignedEmployees")
                        .HasForeignKey("AssignedQueueId");

                    b.HasOne("QueR.Domain.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");

                    b.HasOne("QueR.Domain.Entities.Site", "Worksite")
                        .WithMany("Employees")
                        .HasForeignKey("WorksiteId");
                });

            modelBuilder.Entity("QueR.Domain.Entities.Company", b =>
                {
                    b.HasOne("QueR.Domain.Entities.ApplicationUser", "Administrator")
                        .WithOne("AdministratedCompany")
                        .HasForeignKey("QueR.Domain.Entities.Company", "AdministratorId");
                });

            modelBuilder.Entity("QueR.Domain.Entities.Queue", b =>
                {
                    b.HasOne("QueR.Domain.Entities.Site", "Site")
                        .WithMany("Queues")
                        .HasForeignKey("SiteId");

                    b.HasOne("QueR.Domain.Entities.QueueType", "Type")
                        .WithMany("Queues")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QueR.Domain.Entities.QueueType", b =>
                {
                    b.HasOne("QueR.Domain.Entities.Company", "Company")
                        .WithMany("AvailableQueueTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QueR.Domain.Entities.Site", b =>
                {
                    b.HasOne("QueR.Domain.Entities.Company", "Company")
                        .WithMany("Sites")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QueR.Domain.Entities.ApplicationUser", "Manager")
                        .WithOne("ManagedSite")
                        .HasForeignKey("QueR.Domain.Entities.Site", "ManagerId");
                });

            modelBuilder.Entity("QueR.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("QueR.Domain.Entities.ApplicationUser", "Handler")
                        .WithMany("HandledTickets")
                        .HasForeignKey("HandlerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("QueR.Domain.Entities.ApplicationUser", "Owner")
                        .WithMany("Tickets")
                        .HasForeignKey("OwnerId");

                    b.HasOne("QueR.Domain.Entities.Queue", "Queue")
                        .WithMany("Tickets")
                        .HasForeignKey("QueueId");
                });
#pragma warning restore 612, 618
        }
    }
}
